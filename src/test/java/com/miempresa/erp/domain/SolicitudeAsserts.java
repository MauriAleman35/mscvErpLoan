package com.miempresa.erp.domain;

import static com.miempresa.erp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SolicitudeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSolicitudeAllPropertiesEquals(Solicitude expected, Solicitude actual) {
        assertSolicitudeAutoGeneratedPropertiesEquals(expected, actual);
        assertSolicitudeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSolicitudeAllUpdatablePropertiesEquals(Solicitude expected, Solicitude actual) {
        assertSolicitudeUpdatableFieldsEquals(expected, actual);
        assertSolicitudeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSolicitudeAutoGeneratedPropertiesEquals(Solicitude expected, Solicitude actual) {
        assertThat(actual)
            .as("Verify Solicitude auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSolicitudeUpdatableFieldsEquals(Solicitude expected, Solicitude actual) {
        assertThat(actual)
            .as("Verify Solicitude relevant properties")
            .satisfies(a ->
                assertThat(a.getLoanAmount())
                    .as("check loanAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getLoanAmount())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSolicitudeUpdatableRelationshipsEquals(Solicitude expected, Solicitude actual) {
        assertThat(actual)
            .as("Verify Solicitude relationships")
            .satisfies(a -> assertThat(a.getBorrower()).as("check borrower").isEqualTo(expected.getBorrower()));
    }
}
