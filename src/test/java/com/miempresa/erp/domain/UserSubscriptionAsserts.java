package com.miempresa.erp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserSubscriptionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscriptionAllPropertiesEquals(UserSubscription expected, UserSubscription actual) {
        assertUserSubscriptionAutoGeneratedPropertiesEquals(expected, actual);
        assertUserSubscriptionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscriptionAllUpdatablePropertiesEquals(UserSubscription expected, UserSubscription actual) {
        assertUserSubscriptionUpdatableFieldsEquals(expected, actual);
        assertUserSubscriptionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscriptionAutoGeneratedPropertiesEquals(UserSubscription expected, UserSubscription actual) {
        assertThat(actual)
            .as("Verify UserSubscription auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscriptionUpdatableFieldsEquals(UserSubscription expected, UserSubscription actual) {
        assertThat(actual)
            .as("Verify UserSubscription relevant properties")
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscriptionUpdatableRelationshipsEquals(UserSubscription expected, UserSubscription actual) {
        assertThat(actual)
            .as("Verify UserSubscription relationships")
            .satisfies(a -> assertThat(a.getUser()).as("check user").isEqualTo(expected.getUser()))
            .satisfies(a -> assertThat(a.getSubscriptionPlan()).as("check subscriptionPlan").isEqualTo(expected.getSubscriptionPlan()));
    }
}
