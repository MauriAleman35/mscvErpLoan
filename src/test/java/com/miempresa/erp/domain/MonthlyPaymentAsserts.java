package com.miempresa.erp.domain;

import static com.miempresa.erp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class MonthlyPaymentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMonthlyPaymentAllPropertiesEquals(MonthlyPayment expected, MonthlyPayment actual) {
        assertMonthlyPaymentAutoGeneratedPropertiesEquals(expected, actual);
        assertMonthlyPaymentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMonthlyPaymentAllUpdatablePropertiesEquals(MonthlyPayment expected, MonthlyPayment actual) {
        assertMonthlyPaymentUpdatableFieldsEquals(expected, actual);
        assertMonthlyPaymentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMonthlyPaymentAutoGeneratedPropertiesEquals(MonthlyPayment expected, MonthlyPayment actual) {
        assertThat(actual)
            .as("Verify MonthlyPayment auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMonthlyPaymentUpdatableFieldsEquals(MonthlyPayment expected, MonthlyPayment actual) {
        assertThat(actual)
            .as("Verify MonthlyPayment relevant properties")
            .satisfies(a -> assertThat(a.getDueDate()).as("check dueDate").isEqualTo(expected.getDueDate()))
            .satisfies(a -> assertThat(a.getPaymentDate()).as("check paymentDate").isEqualTo(expected.getPaymentDate()))
            .satisfies(a -> assertThat(a.getBorrowVerified()).as("check borrowVerified").isEqualTo(expected.getBorrowVerified()))
            .satisfies(a -> assertThat(a.getPartnerVerified()).as("check partnerVerified").isEqualTo(expected.getPartnerVerified()))
            .satisfies(a -> assertThat(a.getComprobantFile()).as("check comprobantFile").isEqualTo(expected.getComprobantFile()))
            .satisfies(a -> assertThat(a.getDaysLate()).as("check daysLate").isEqualTo(expected.getDaysLate()))
            .satisfies(a ->
                assertThat(a.getPenaltyAmount())
                    .as("check penaltyAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPenaltyAmount())
            )
            .satisfies(a -> assertThat(a.getPaymentStatus()).as("check paymentStatus").isEqualTo(expected.getPaymentStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMonthlyPaymentUpdatableRelationshipsEquals(MonthlyPayment expected, MonthlyPayment actual) {
        assertThat(actual)
            .as("Verify MonthlyPayment relationships")
            .satisfies(a -> assertThat(a.getLoan()).as("check loan").isEqualTo(expected.getLoan()));
    }
}
