package com.miempresa.erp.domain;

import static com.miempresa.erp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class LoanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanAllPropertiesEquals(Loan expected, Loan actual) {
        assertLoanAutoGeneratedPropertiesEquals(expected, actual);
        assertLoanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanAllUpdatablePropertiesEquals(Loan expected, Loan actual) {
        assertLoanUpdatableFieldsEquals(expected, actual);
        assertLoanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanAutoGeneratedPropertiesEquals(Loan expected, Loan actual) {
        assertThat(actual)
            .as("Verify Loan auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanUpdatableFieldsEquals(Loan expected, Loan actual) {
        assertThat(actual)
            .as("Verify Loan relevant properties")
            .satisfies(a ->
                assertThat(a.getLoanAmount())
                    .as("check loanAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getLoanAmount())
            )
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getHashBlockchain()).as("check hashBlockchain").isEqualTo(expected.getHashBlockchain()))
            .satisfies(a -> assertThat(a.getCurrentStatus()).as("check currentStatus").isEqualTo(expected.getCurrentStatus()))
            .satisfies(a -> assertThat(a.getLatePaymentCount()).as("check latePaymentCount").isEqualTo(expected.getLatePaymentCount()))
            .satisfies(a -> assertThat(a.getLastStatusUpdate()).as("check lastStatusUpdate").isEqualTo(expected.getLastStatusUpdate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLoanUpdatableRelationshipsEquals(Loan expected, Loan actual) {
        assertThat(actual)
            .as("Verify Loan relationships")
            .satisfies(a -> assertThat(a.getOffer()).as("check offer").isEqualTo(expected.getOffer()));
    }
}
