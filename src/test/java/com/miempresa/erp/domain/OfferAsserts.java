package com.miempresa.erp.domain;

import static com.miempresa.erp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class OfferAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOfferAllPropertiesEquals(Offer expected, Offer actual) {
        assertOfferAutoGeneratedPropertiesEquals(expected, actual);
        assertOfferAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOfferAllUpdatablePropertiesEquals(Offer expected, Offer actual) {
        assertOfferUpdatableFieldsEquals(expected, actual);
        assertOfferUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOfferAutoGeneratedPropertiesEquals(Offer expected, Offer actual) {
        assertThat(actual)
            .as("Verify Offer auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOfferUpdatableFieldsEquals(Offer expected, Offer actual) {
        assertThat(actual)
            .as("Verify Offer relevant properties")
            .satisfies(a -> assertThat(a.getPartnerId()).as("check partnerId").isEqualTo(expected.getPartnerId()))
            .satisfies(a ->
                assertThat(a.getInterest()).as("check interest").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getInterest())
            )
            .satisfies(a -> assertThat(a.getLoanTerm()).as("check loanTerm").isEqualTo(expected.getLoanTerm()))
            .satisfies(a ->
                assertThat(a.getMonthlyPayment())
                    .as("check monthlyPayment")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getMonthlyPayment())
            )
            .satisfies(a ->
                assertThat(a.getTotalRepaymentAmount())
                    .as("check totalRepaymentAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getTotalRepaymentAmount())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOfferUpdatableRelationshipsEquals(Offer expected, Offer actual) {
        assertThat(actual)
            .as("Verify Offer relationships")
            .satisfies(a -> assertThat(a.getSolicitude()).as("check solicitude").isEqualTo(expected.getSolicitude()));
    }
}
